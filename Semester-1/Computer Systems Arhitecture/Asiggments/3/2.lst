     1                                  ; Fatu Samuel
     2                                  ; (a * a + b + x) / (b + b) + c * c
     3                                  ; a-word; b-byte; c-doubleword; x-qword
     4                                  
     5                                  bits 32 
     6                                  
     7                                  global start        
     8                                  
     9                                  extern exit               
    10                                  import exit msvcrt.dll  
    11                                  
    12                                  
    13                                  segment data use32 class=data
    14 00000000 0A00                        a   dw  10
    15 00000002 05                          b   db  5
    16 00000003 03000000                    _c  dd  3
    17 00000007 0500000000000000            x   dq  5
    18                                  
    19 0000000F <res 00000004>              temp resw 2
    20 00000013 <res 00000004>              r resw 2
    21                                      
    22                                      
    23                                  segment code use32 class=code
    24                                      start:
    25                                         
    26 00000000 A0[02000000]                    mov AL, [b] ; AL = [b]
    27 00000005 6698                            cbw ; AX = AL = [b]
    28 00000007 98                              cwde ; EAX = AX = [b]
    29 00000008 99                              cdq ; EDX:EAX = EAX = [b]
    30                                         
    31 00000009 89C1                            mov ECX, EAX ; ECX = EAX
    32 0000000B 89D3                            mov EBX, EDX ; EBX = EDX
    33                                         
    34                                          ; EBX:ECX = [b]
    35                                          
    36 0000000D 66A1[00000000]                  mov AX, [a] ; AX = [a]
    37 00000013 660FAF05[00000000]              imul AX, [a] ; DX:AX = AX * [a]
    38                                          
    39 0000001B 6652                            push DX
    40 0000001D 6650                            push AX
    41                                          
    42 0000001F 58                              pop EAX ; EAX = DX:AX
    43                                          
    44 00000020 99                              cdq ; EDX:EAX = EAX
    45                                         
    46 00000021 01C8                            add EAX, ECX ; EAX = EAX + ECX
    47 00000023 11DA                            adc EDX, EBX ; EDX = EDX + EBX + cf
    48                                         
    49 00000025 0305[07000000]                  add EAX, dword [x] ; EAX = EAX + dword [x]
    50 0000002B 1315[0B000000]                  adc EDX, dword [x + 4] ; EDX = EDX + dword [x + 4] + cf
    51                                          ; EDX:EAX = (a * a + b + x)
    52                                         
    53 00000031 89C1                            mov ECX, EAX ; ECX = EAX
    54 00000033 89D3                            mov EBX, EDX ; EBX = EDX
    55                                          ; EBX:ECX = (a * a + b + x)
    56                                          
    57 00000035 A0[02000000]                    mov AL, [b] ; AL = [b]
    58 0000003A 0205[02000000]                  add AL, [b] ; AL = AL + [b]
    59 00000040 6698                            cbw ; AX = AL = [b] + [b]
    60 00000042 98                              cwde ; EAX = AX = [b] + [b]
    61                                          
    62 00000043 A3[0F000000]                    mov dword [temp], EAX ; [temp] = EAX
    63                                          
    64 00000048 89C8                            mov EAX, ECX ; EAX = ECX
    65 0000004A 89DA                            mov EDX, EBX ; EDX = EBX
    66                                          
    67                                          ; quadword / dword = dword
    68 0000004C F73D[0F000000]                  idiv dword [temp] ; EAX = EDX:EAX / [temp] = (a * a + b + x) /  (b + b)
    69                                          
    70 00000052 A3[13000000]                    mov dword [r], EAX ; r = EAX = (a * a + b + x) / (b + b) 
    71                                          
    72 00000057 A1[03000000]                    mov EAX, [_c] ; EAX = [_c]
    73 0000005C F72D[03000000]                  imul dword [_c] ; EDX:EAX = c * c
    74                                          
    75 00000062 89C1                            mov ECX, EAX ; ECX = EAX
    76 00000064 89D3                            mov EBX, EDX ; EBX = EDX
    77                                          ; EBX:ECX =  c * c
    78                                          
    79 00000066 A1[13000000]                    mov EAX, dword [r] ; EAX = dword [r]
    80 0000006B 99                              cdq ; EDX:EAX = EAX = [r]
    81                                          
    82 0000006C 01C8                            add EAX, ECX ; EAX = EAX + ECX
    83 0000006E 11DA                            adc EDX, EBX ; EDX = EDX + EBX + cf
    84                                          
    85                                          ; EDX:EAX = (a * a + b + x) / (b + b) + c * c
    86                                          
    87 00000070 6A00                            push    dword 0      
    88 00000072 FF15[00000000]                  call    [exit]
    89                                  
    90                                          
    91                                          
