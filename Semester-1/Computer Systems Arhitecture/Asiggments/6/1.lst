     1                                  ; Fatu Samuel
     2                                  
     3                                  
     4                                  ; A string of bytes is given. Obtain the mirror image of the binary representation of this string of bytes.
     5                                  ; s DB 01011100b, 10001001b, 11100101b 
     6                                  ; d DB 10100111b, 10010001b, 00111010b
     7                                  
     8                                  bits 32 
     9                                  
    10                                  global start        
    11                                  
    12                                  extern exit               
    13                                  import exit msvcrt.dll  
    14                                  
    15                                  
    16                                  segment data use32 class=data
    17 00000000 5C89E5                      s   db  01011100b, 10001001b, 11100101b
    18                                      len_s equ ($ - s)
    19                                      
    20 00000003 00<rept>                    d   times len_s db  0
    21                                      
    22                                  
    23                                  segment code use32 class=code
    24                                      start:
    25                                          
    26 00000000 BE[00000000]                    mov esi, s
    27 00000005 BF[05000000]                    mov edi, s + 2 * len_s - 1
    28                                          
    29 0000000A B903000000                      mov ecx, len_s
    30                                         
    31 0000000F E317                            jecxz end_loop
    32                                          
    33                                          start_loop:
    34                                              
    35 00000011 FC                                  cld ; clears the direction flag
    36 00000012 AC                                  lodsb ; the btye from the address <esi> is loaded in `al` ; esi += 1
    37                                              
    38 00000013 B300                                mov bl, 0  ; bl = 0
    39                                              
    40 00000015 B208                                mov dl, 8 ; we will mirror 8 bits
    41                                              
    42                                              mirror_bits:
    43                                              
    44 00000017 D0E8                                    shr al, 1 ; shift to the right `al` with 1 bit ; cf will be the last disappearing bit from `al`
    45 00000019 D0D3                                    rcl bl, 1 ; rotate `bl`with carry to the left ; cf will be added as the last digit of 'bl'
    46                                                  
    47 0000001B FECA                                    dec dl ; dl -= 1
    48 0000001D 80FA00                                  cmp dl, 0 ; compares `dl` with 0
    49                                              
    50 00000020 75F5                                jne mirror_bits ; jumps if dl != 0
    51                                              
    52 00000022 88D8                                mov al, bl ; al = bl
    53                                              
    54 00000024 FD                                  std ; sets the direction flag
    55 00000025 AA                                  stosb ; the byte from `al` is stored into the byte from the address <edi> ; edi -= 1 (df = 1)
    56                                             
    57 00000026 E2E9                            loop start_loop
    58                                          
    59                                          end_loop
    59          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    60                                          
    61 00000028 6A00                            push    dword 0      
    62 0000002A FF15[00000000]                  call    [exit]
