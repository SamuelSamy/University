>>Program State:
Thread ID: 1
executionStack = [(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))))))))), Ref(int) v1]
symbolTable = {}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))))))))))]
symbolTable = {v1=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))))))))), Ref(int) v2]
symbolTable = {v1=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))))))))]
symbolTable = {v1=(0, int), v2=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))))))), Ref(int) v3]
symbolTable = {v1=(0, int), v2=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))))))))]
symbolTable = {v1=(0, int), v2=(0, int), v3=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))))))), int cnt]
symbolTable = {v1=(0, int), v2=(0, int), v3=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(new(v1, 2); (new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))))))]
symbolTable = {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))))), new(v1, 2)]
symbolTable = {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
output = []
files = {}
heap = {}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(new(v2, 3); (new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))))))]
symbolTable = {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
output = []
files = {}
heap = {1=2}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))))), new(v2, 3)]
symbolTable = {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
output = []
files = {}
heap = {1=2}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(new(v3, 4); (NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
output = []
files = {}
heap = {1=2, 2=3}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))), new(v3, 4)]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
output = []
files = {}
heap = {1=2, 2=3}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(NewBarrier(cnt, readHeap(v2)); (fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))), NewBarrier(cnt, readHeap(v2))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 
status: running


>>Program State:
Thread ID: 1
executionStack = [(fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))); (fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[]

status: running


>>Program State:
Thread ID: 1
executionStack = [(fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3)))), fork((await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[]

status: running


>>Program State:
Thread ID: 1
executionStack = [(fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))); (await(cnt); print(readHeap(v3))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[]

status: running


>>Program State:
Thread ID: 2
executionStack = [(await(cnt); (writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[]

status: running


>>Program State:
Thread ID: 1
executionStack = [(await(cnt); print(readHeap(v3))), fork((await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2))))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[]

status: running


>>Program State:
Thread ID: 2
executionStack = [(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1))), await(cnt)]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[]

status: running


>>Program State:
Thread ID: 1
executionStack = [(await(cnt); print(readHeap(v3)))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[2]

status: running


>>Program State:
Thread ID: 2
executionStack = [(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[2]

status: running


>>Program State:
Thread ID: 3
executionStack = [(await(cnt); (writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[2]

status: running


>>Program State:
Thread ID: 1
executionStack = [print(readHeap(v3)), await(cnt)]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[2]

status: running


>>Program State:
Thread ID: 2
executionStack = [print(readHeap(v1)), writeHeap(v1, (readHeap(v1) * 10))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[2]

status: running


>>Program State:
Thread ID: 3
executionStack = [(writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))), await(cnt)]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=2, 2=3, 3=4}
barrierTable = 0 -> 3=[2]

status: running


>>Program State:
Thread ID: 1
executionStack = [print(readHeap(v3))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=20, 2=3, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: running


>>Program State:
Thread ID: 2
executionStack = [print(readHeap(v1))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=20, 2=3, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: running


>>Program State:
Thread ID: 3
executionStack = [(writeHeap(v2, (readHeap(v2) * 10)); (writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2))))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = []
files = {}
heap = {1=20, 2=3, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: running


>>Program State:
Thread ID: 1
executionStack = []
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = [4, 20]
files = {}
heap = {1=20, 2=3, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: finished


>>Program State:
Thread ID: 2
executionStack = []
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = [4, 20]
files = {}
heap = {1=20, 2=3, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: finished


>>Program State:
Thread ID: 3
executionStack = [(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2))), writeHeap(v2, (readHeap(v2) * 10))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = [4, 20]
files = {}
heap = {1=20, 2=3, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: running


>>Program State:
Thread ID: 3
executionStack = [(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = [4, 20]
files = {}
heap = {1=20, 2=30, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: running


>>Program State:
Thread ID: 3
executionStack = [print(readHeap(v2)), writeHeap(v2, (readHeap(v2) * 10))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = [4, 20]
files = {}
heap = {1=20, 2=30, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: running


>>Program State:
Thread ID: 3
executionStack = [print(readHeap(v2))]
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = [4, 20]
files = {}
heap = {1=20, 2=300, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: running


>>Program State:
Thread ID: 3
executionStack = []
symbolTable = {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
output = [4, 20, 300]
files = {}
heap = {1=20, 2=300, 3=4}
barrierTable = 0 -> 3=[2, 1, 3]

status: finished


