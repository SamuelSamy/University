>>Program State:
executionStack = [(Ref(int) v; (new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(v); print(a))))))]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(v); print(a))))), Ref(int) v]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(v); print(a))))), Ref(int) v]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(v); print(a)))))]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(v); print(a)))))]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(v); print(a)))), new(v, 20)]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(v); print(a)))), new(v, 20)]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(v); print(a))))]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(v); print(a))))]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(v); print(a))), Ref(Ref(int)) a]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(v); print(a))), Ref(Ref(int)) a]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(v); print(a)))]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(v); print(a)))]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(print(v); print(a)), new(a, v)]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(print(v); print(a)), new(a, v)]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(print(v); print(a))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [(print(v); print(a))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print(a), print(v)]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print(a), print(v)]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print(a)]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [(1, int)]
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print(a)]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [(1, int)]
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = []
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [(1, int), (2, Ref(int))]
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = []
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [(1, int), (2, Ref(int))]
files = {}
heap = {1=20, 2=(1, int)}


