>>Program State:
executionStack = [(Ref(int) v; (new(v, 20); (Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))))]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))), Ref(int) v]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))), Ref(int) v]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))))]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))))]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))), new(v, 20)]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))), new(v, 20)]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (new(v, 30); print(readHeap(readHeap(a))))), Ref(Ref(int)) a]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (new(v, 30); print(readHeap(readHeap(a))))), Ref(Ref(int)) a]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(v, 30); print(readHeap(readHeap(a)))), new(a, v)]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(v, 30); print(readHeap(readHeap(a)))), new(a, v)]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(v, 30); print(readHeap(readHeap(a))))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [(new(v, 30); print(readHeap(readHeap(a))))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print(readHeap(readHeap(a))), new(v, 30)]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print(readHeap(readHeap(a))), new(v, 30)]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print(readHeap(readHeap(a)))]
symbolTable = {a=(2, Ref(int)), v=(3, int)}
output = []
files = {}
heap = {1=20, 2=(1, int), 3=30}


>>Program State:
executionStack = [print(readHeap(readHeap(a)))]
symbolTable = {a=(2, Ref(int)), v=(3, int)}
output = []
files = {}
heap = {1=20, 2=(1, int), 3=30}


>>Program State:
executionStack = []
symbolTable = {a=(2, Ref(int)), v=(3, int)}
output = [20]
files = {}
heap = {1=20, 2=(1, int), 3=30}


>>Program State:
executionStack = []
symbolTable = {a=(2, Ref(int)), v=(3, int)}
output = [20]
files = {}
heap = {1=20, 2=(1, int), 3=30}


