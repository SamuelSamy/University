>>Program State:
executionStack = [(Ref(int) v; (new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))))))]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))))), Ref(int) v]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))))), Ref(int) v]
symbolTable = {}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5))))))]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(new(v, 20); (Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5))))))]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5))))), new(v, 20)]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5))))), new(v, 20)]
symbolTable = {v=(0, int)}
output = []
files = {}
heap = {}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))))]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(Ref(Ref(int)) a; (new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))))]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))), Ref(Ref(int)) a]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))), Ref(Ref(int)) a]
symbolTable = {v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5))))]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(new(a, v); (print(readHeap(v)); print((readHeap(readHeap(a)) + 5))))]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(print(readHeap(v)); print((readHeap(readHeap(a)) + 5))), new(a, v)]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(print(readHeap(v)); print((readHeap(readHeap(a)) + 5))), new(a, v)]
symbolTable = {a=(0, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20}


>>Program State:
executionStack = [(print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [(print(readHeap(v)); print((readHeap(readHeap(a)) + 5)))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print((readHeap(readHeap(a)) + 5)), print(readHeap(v))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print((readHeap(readHeap(a)) + 5)), print(readHeap(v))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = []
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print((readHeap(readHeap(a)) + 5))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [20]
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = [print((readHeap(readHeap(a)) + 5))]
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [20]
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = []
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [20, 25]
files = {}
heap = {1=20, 2=(1, int)}


>>Program State:
executionStack = []
symbolTable = {a=(2, Ref(int)), v=(1, int)}
output = [20, 25]
files = {}
heap = {1=20, 2=(1, int)}


