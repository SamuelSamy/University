1.2
f(1, 1) :- !.
f(K, X) :-
    K1 is K - 1,
    f(K1, Y),
    Y > 1, !,
    K2 is K1 - 1,
    X is K2.

f(K, X) :-
    K1 is K - 1,
    f(K1, Y),
    Y > 0.5, !,
    X is Y.

f(K, X) :-
    K1 is K - 1,
    f(K1, Y),
    X is Y - 1.

Soltuion:

f(1, 1) :- !.
f(K, X) :-
    K1 is K - 1,
    f(K1, Y),
    faux(K1, Y, X).


faux(K, Y, X) :-
    Y > 1, !,
    X is K - 1.

faux(_, Y, X) :-
    Y > 0.5,
    X is Y.

faux(_, Y, X) :-
    X is Y - 1.





1.3
(DEFUN G(F L)
    (FUNCALL F L)
)

(G #'(LAMBDA (L) (G #'CDR L)) (1 2 3)) => 
(G #'CDR L) will call the function (CDR L) => 
(G #'(LAMBDA (L) (CDR L)) '(1 2 3)); the lambda function `#'(LAMBDA (L) (CDR L))` returns (CDR L) therefore 
the result is '(1 2)




1.4
p(1).
p(2).
q(1).
q(2).
r(1).
r(2).

s :-
    p(X), !,
    q(Y),
    r(Z),
    write(X, Y, Z), nl.


1 1 1
1 1 2
1 2 1
1 2 2

Justify: X takes the value of 1 and the predicate uses a cut after, therefore X will never get value 2.
After the cut Y takes the value of 1, and same for Z (1 1 1). The predicate backtracks to r(Z) and z takes the
value of 2 (1 1 2). It once again backtracks to r(Z), which will return false so the predicate backtracks to q(Y),
Y takes the value of 2 and repeats the above proccess.

